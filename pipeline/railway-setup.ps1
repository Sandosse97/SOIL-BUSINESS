#!/usr/bin/env pwsh
# railway-setup.ps1 - Configuration Railway

Write-Host "üöÇ √âTAPE 2: SETUP RAILWAY" -ForegroundColor Blue
Write-Host "==========================" -ForegroundColor Blue

$ErrorActionPreference = "Stop"
$config = Get-Content "pipeline/config.json" | ConvertFrom-Json

function Invoke-RailwayCommand {
    param($Command, $Description)
    
    Write-Host "üîß $Description..." -ForegroundColor Yellow
    
    try {
        $result = Invoke-Expression "railway $Command" 2>&1
        Write-Host "‚úÖ $Description - R√©ussi" -ForegroundColor Green
        return $result
    } catch {
        Write-Host "‚ùå $Description - √âchec: $_" -ForegroundColor Red
        throw
    }
}

# 1. V√©rifier pr√©-migration
if (!(Test-Path "pipeline/.pre-migration-passed")) {
    Write-Host "‚ùå Pr√©-migration non valid√©e. Lancez d'abord .\pre-migration.ps1" -ForegroundColor Red
    exit 1
}

# 2. Installer Railway CLI si n√©cessaire
Write-Host "üì¶ V√©rification Railway CLI..." -ForegroundColor Yellow
try {
    railway --version | Out-Null
    Write-Host "‚úÖ Railway CLI d√©tect√©" -ForegroundColor Green
} catch {
    Write-Host "üì• Installation Railway CLI..." -ForegroundColor Yellow
    npm install -g @railway/cli
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erreur installation Railway CLI" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Railway CLI install√©" -ForegroundColor Green
}

# 3. Authentification Railway
Write-Host "üîê Authentification Railway..." -ForegroundColor Yellow
Write-Host "üìå Une page web va s'ouvrir pour l'authentification" -ForegroundColor Cyan

try {
    railway login
    Write-Host "‚úÖ Authentification r√©ussie" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur d'authentification Railway" -ForegroundColor Red
    exit 1
}

# 4. Initialiser le projet Railway
Invoke-RailwayCommand "init" "Initialisation projet Railway"

# 5. Connecter GitHub repository
Invoke-RailwayCommand "connect" "Connexion repository GitHub"

# 6. Ajouter base de donn√©es PostgreSQL
Write-Host "üóÑÔ∏è Ajout base de donn√©es PostgreSQL..." -ForegroundColor Yellow
try {
    railway add postgresql
    Write-Host "‚úÖ Base de donn√©es PostgreSQL ajout√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Base de donn√©es d√©j√† pr√©sente ou erreur mineure" -ForegroundColor Yellow
}

# 7. G√©n√©rer JWT secret si n√©cessaire
$jwtSecret = -join ((1..64) | ForEach {Get-Random -input ([char[]](48..57) + [char[]](65..90) + [char[]](97..122))})

# 8. Configurer variables d'environnement partag√©es
Write-Host "‚öôÔ∏è Configuration variables d'environnement..." -ForegroundColor Yellow

$sharedVars = $config.environments.shared
foreach ($key in $sharedVars.PSObject.Properties.Name) {
    $value = $sharedVars.$key
    Invoke-RailwayCommand "variables set $key='$value'" "Variable $key"
}

# JWT Secret
Invoke-RailwayCommand "variables set JWT_SECRET='$jwtSecret'" "JWT Secret"

# 9. Cr√©er marker de setup r√©ussi
@{
    timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    setup = "completed"
    jwtSecret = $jwtSecret
    services = $config.services.PSObject.Properties.Name
} | ConvertTo-Json | Out-File "pipeline/.railway-setup-completed" -Encoding UTF8

Write-Host ""
Write-Host "üéâ Setup Railway termin√© avec succ√®s !" -ForegroundColor Green
Write-Host "üìä Projet cr√©√© avec:" -ForegroundColor Blue
Write-Host "  - PostgreSQL database" -ForegroundColor Gray
Write-Host "  - Variables d'environnement configur√©es" -ForegroundColor Gray
Write-Host "  - GitHub repository connect√©" -ForegroundColor Gray
Write-Host ""
Write-Host "üîó Dashboard Railway: https://railway.app/dashboard" -ForegroundColor Cyan
Write-Host "‚û°Ô∏è Prochaine √©tape: .\migrate-services.ps1" -ForegroundColor Yellow