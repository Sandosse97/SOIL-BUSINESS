#!/usr/bin/env pwsh
# migrate-services.ps1 - Migration des services

Write-Host "üöÄ √âTAPE 3: MIGRATION SERVICES" -ForegroundColor Blue
Write-Host "===============================" -ForegroundColor Blue

$ErrorActionPreference = "Stop"
$config = Get-Content "pipeline/config.json" | ConvertFrom-Json

# V√©rifier setup Railway
if (!(Test-Path "pipeline/.railway-setup-completed")) {
    Write-Host "‚ùå Setup Railway non termin√©. Lancez d'abord .\railway-setup.ps1" -ForegroundColor Red
    exit 1
}

function Deploy-Service {
    param($ServiceName, $ServiceConfig)
    
    Write-Host ""
    Write-Host "üöÄ D√©ploiement service: $ServiceName" -ForegroundColor Cyan
    Write-Host "======================================" -ForegroundColor Gray
    
    # Variables sp√©cifiques au service
    $envVars = $config.environments.$ServiceName
    if ($envVars) {
        Write-Host "‚öôÔ∏è Configuration variables pour $ServiceName..." -ForegroundColor Yellow
        foreach ($key in $envVars.PSObject.Properties.Name) {
            $value = $envVars.$key
            Write-Host "  Setting $key..." -ForegroundColor Gray
            railway variables set "$key=$value" 2>&1 | Out-Null
        }
    }
    
    # D√©ploiement via Git push (Railway d√©tecte automatiquement)
    Write-Host "üì§ D√©ploiement $ServiceName via Railway..." -ForegroundColor Yellow
    
    try {
        # Railway up deploy tout automatiquement depuis GitHub
        railway up --service $ServiceName 2>&1
        Write-Host "‚úÖ Service $ServiceName d√©ploy√©" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå Erreur d√©ploiement $ServiceName" -ForegroundColor Red
        Write-Host "D√©tails: $_" -ForegroundColor Red
        return $false
    }
}

function Test-ServiceHealth {
    param($ServiceName, $HealthUrl)
    
    Write-Host "üîç Test sant√© $ServiceName..." -ForegroundColor Yellow
    
    $maxRetries = 10
    $retryDelay = 30
    
    for ($i = 1; $i -le $maxRetries; $i++) {
        try {
            Write-Host "  Tentative $i/$maxRetries..." -ForegroundColor Gray
            $response = Invoke-RestMethod -Uri $HealthUrl -Method GET -TimeoutSec 10
            Write-Host "‚úÖ $ServiceName en ligne et op√©rationnel" -ForegroundColor Green
            return $true
        } catch {
            Write-Host "‚è≥ $ServiceName pas encore pr√™t, attente ${retryDelay}s..." -ForegroundColor Yellow
            Start-Sleep $retryDelay
        }
    }
    
    Write-Host "‚ùå $ServiceName ne r√©pond pas apr√®s $maxRetries tentatives" -ForegroundColor Red
    return $false
}

# Build local pour v√©rification
Write-Host "üî® Build local avant d√©ploiement..." -ForegroundColor Yellow
pnpm run build
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Build local √©chou√©" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Build local r√©ussi" -ForegroundColor Green

# D√©ploiement global (monorepo)
Write-Host ""
Write-Host "üöÄ D√©ploiement monorepo complet..." -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Gray

try {
    # Railway d√©tecte automatiquement le monorepo et cr√©e les services
    railway up
    Write-Host "‚úÖ D√©ploiement global lanc√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur d√©ploiement global" -ForegroundColor Red
    Write-Host "D√©tails: $_" -ForegroundColor Red
    exit 1
}

# Attente stabilisation
Write-Host ""
Write-Host "‚è≥ Attente stabilisation des services (60s)..." -ForegroundColor Yellow
Start-Sleep 60

# Validation des services
Write-Host ""
Write-Host "üß™ VALIDATION DES SERVICES" -ForegroundColor Blue
Write-Host "===========================" -ForegroundColor Blue

$deploymentSuccess = $true
$serviceResults = @{}

# Tester chaque service
foreach ($serviceName in $config.services.PSObject.Properties.Name) {
    $healthUrl = $config.validation.healthchecks.$serviceName
    $isHealthy = Test-ServiceHealth $serviceName $healthUrl
    $serviceResults[$serviceName] = $isHealthy
    
    if (!$isHealthy) {
        $deploymentSuccess = $false
    }
}

# R√©sum√© d√©ploiement
Write-Host ""
Write-Host "üìä R√âSUM√â D√âPLOIEMENT" -ForegroundColor Blue
Write-Host "=====================" -ForegroundColor Blue

foreach ($service in $serviceResults.Keys) {
    $status = if ($serviceResults[$service]) { "‚úÖ OP√âRATIONNEL" } else { "‚ùå √âCHEC" }
    $color = if ($serviceResults[$service]) { "Green" } else { "Red" }
    Write-Host "$service : $status" -ForegroundColor $color
}

if ($deploymentSuccess) {
    Write-Host ""
    Write-Host "üéâ MIGRATION R√âUSSIE !" -ForegroundColor Green
    Write-Host "======================" -ForegroundColor Green
    
    Write-Host ""
    Write-Host "üîó VOS APPLICATIONS SONT LIVE :" -ForegroundColor Cyan
    Write-Host "API      : https://soil-business-api.railway.app/" -ForegroundColor Gray
    Write-Host "Web      : https://soil-business-web.railway.app/" -ForegroundColor Gray
    Write-Host "Admin    : https://soil-business-admin.railway.app/" -ForegroundColor Gray
    
    # Cr√©er marker de migration r√©ussie
    @{
        timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        migration = "completed"
        services = $serviceResults
    } | ConvertTo-Json | Out-File "pipeline/.migration-completed" -Encoding UTF8
    
    Write-Host ""
    Write-Host "‚û°Ô∏è Prochaine √©tape: .\post-migration.ps1" -ForegroundColor Yellow
    
} else {
    Write-Host ""
    Write-Host "‚ùå MIGRATION PARTIELLEMENT √âCHOU√âE" -ForegroundColor Red
    Write-Host "Consultez les logs Railway pour plus de d√©tails" -ForegroundColor Yellow
    Write-Host "railway logs --follow" -ForegroundColor Gray
    exit 1
}